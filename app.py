# Fichier: app.py (Version Finale - PROPRE - GARANTIE v8 - Compl√®te)
import os
import io
import base64
from typing import Dict, List
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px

# =========================
# Config de page
# =========================
st.set_page_config(
    # TITRE MIS √Ä JOUR POUR LES RECRUTEURS
    page_title="Agent IA de Transformation Strat√©gique",
    page_icon="üöÄ",
    layout="wide"
)

# =========================
# I18N ‚Äî Multilingue FR/EN
# =========================
# TEXTES MIS √Ä JOUR POUR √äTRE PLUS PERCUTANTS
LANGS = {
    "fr": {
        "app_title": "üöÄ Agent IA de Transformation Strat√©gique",
        "app_sub": "Transformez n'importe quel r√©f√©rentiel de maturit√© en une feuille de route IA. Ciblez les priorit√©s, g√©n√©rez le rapport et pilotez le changement.",
        "sidebar_title": "‚öôÔ∏è Param√®tres",
        "sidebar_lang": "Langue",
        "sidebar_excel": "Votre R√©f√©rentiel (Excel)",
        "sidebar_ai_toggle": "Activer l'Agent IA (OpenAI)",
        "sidebar_model": "Mod√®le OpenAI",
        "sidebar_api": "OPENAI_API_KEY",
        "sidebar_hint": "L'IA est optionnelle. Sans cl√©, le rapport est g√©n√©r√© par heuristique.",
        "questionnaire": "üß© 1. Auto-√©valuation (16 domaines)",
        "level_label": "Niveau",
        "level_options": ["1", "2", "3", "4", "5"], # Pour st.radio
        "level_keys": ["level_1","level_2","level_3","level_4","level_5"],
        "chosen_level": "Niveau choisi",
        "kpi_global": "Score global",
        "kpi_domains": "Domaines √©valu√©s",
        "kpi_questions": "Points de contr√¥le",
        "kpi_weak": "Domaines prioritaires",
        "radar_title": "üìä 2. Radar de Maturit√©",
        "prio_title": "üß≠ 3. Priorisation Strat√©gique (Score vs. Poids)",
        "bar_title": "Domaines √† traiter en premier",
        "ai_mode_manual": "üîí Mode manuel ‚Äî activez l'IA (OpenAI) dans la barre lat√©rale pour une analyse et une feuille de route de niveau consultant.",
        "summary_title": "üìù 4. Rapport Ex√©cutif & Feuille de Route",
        "download_report": "üì• T√©l√©charger le Rapport (Markdown)",
        "post_title": "üîó 5. Post LinkedIn (Pr√™t √† frapper)",
        # POST LINKEDIN REFAIT POUR ATTRIRER LES CDI
        "post_text": "J'arr√™te de voir des diagnostics de maturit√© Excel qui dorment dans un SharePoint.",
        "post_text_2": "J'ai donc build√© **MaturityAgent** (Streamlit) üöÄ.",
        "post_text_3": "C'est un agent IA qui transforme n'importe quel framework (Data, IT, Cyber, ESG...) en un **atelier interactif**.",
        "post_text_4": "Le but ? G√©n√©rer une **feuille de route IA** en < 1 heure, pas en 3 mois.",
        "post_bullets": [
            "‚Ä¢ Mon benchmark (sur 16 domaines): Score global **{score:.1f}/100**",
            "‚Ä¢ Domaines prioritaires (Quick Wins): **{top3}**"
        ],
        "post_footer": "Le code est open-source. Qui est pr√™t √† challenger son r√©f√©rentiel ?\n#TransformationDigitale #IA #Consulting #Strategy #DataGovernance #Cybersecurity #Streamlit #CDI",
        "xls_template": "üì¶ T√©l√©charger le mod√®le Excel",
        "xls_template_tip": "Feuille `questions` requise: domain, question, weight, level_1..level_5",
        "default_strengths": "Forces",
        "default_risks": "Risques/Priorit√©s",
        "fallback_summary": "Synth√®se ‚Äî Score global **{score:.1f}/100**. {strengths}: {s_list}. {risks}: {r_list}.",
        "fallback_roadmap_title": "Feuille de route (heuristique sans IA)",
        "fallback_roadmap_90": "**90 jours (Quick Wins):**",
        "fallback_roadmap_6m": "**6 mois (Structuration):**",
        "fallback_roadmap_12m": "**12 mois (Scale):**",
        "quick_win_line": "- [{domain}] **Action prioritaire** sur ‚Äú{question}‚Äù (Score actuel: {level}/5) ‚Äî Viser le niveau 3."
    },
    "en": {
         "app_title": "üöÄ Strategic Transformation AI Agent",
        "app_sub": "Turn any maturity framework into an AI-driven roadmap. Target priorities, generate reports, and drive change.",
        "sidebar_title": "‚öôÔ∏è Settings",
        "sidebar_lang": "Language",
        "sidebar_excel": "Your Framework (Excel)",
        "sidebar_ai_toggle": "Enable AI Agent (OpenAI)",
        "sidebar_model": "OpenAI model",
        "sidebar_api": "OPENAI_API_KEY",
        "sidebar_hint": "AI is optional. Without a key, a heuristic report is generated.",
        "questionnaire": "üß© 1. Self-Assessment (16 Domains)",
        "level_label": "Level",
        "level_options": ["1", "2", "3", "4", "5"],
        "level_keys": ["level_1","level_2","level_3","level_4","level_5"],
        "chosen_level": "Selected level",
        "kpi_global": "Global Score",
        "kpi_domains": "Domains Assessed",
        "kpi_questions": "Control Points",
        "kpi_weak": "Priority Domains",
        "radar_title": "üìä 2. Maturity Radar",
        "prio_title": "üß≠ 3. Strategic Prioritization (Score vs. Weight)",
        "bar_title": "Top Domains to Address",
        "ai_mode_manual": "üîí Manual Mode ‚Äî Enable AI (OpenAI) in the sidebar for a consultant-grade analysis and roadmap.",
        "summary_title": "üìù 4. Executive Report & Roadmap",
        "download_report": "üì• Download Report (Markdown)",
        "post_title": "üîó 5. LinkedIn Post (Ready to Hit)",
        "post_text": "I'm tired of seeing Excel maturity diagnostics sleeping in a SharePoint.",
        "post_text_2": "So I built **MaturityAgent** (Streamlit) üöÄ.",
        "post_text_3": "It's an AI agent that turns any framework (Data, IT, Cyber, ESG...) into an **interactive workshop**.",
        "post_text_4": "The goal? Generate an **AI-driven roadmap** in < 1 hour, not 3 months.",
        "post_bullets": [
            "‚Ä¢ My benchmark (16 domains): Global Score **{score:.1f}/100**",
            "‚Ä¢ Priority Domains (Quick Wins): **{top3}**"
        ],
        "post_footer": "The code is open-source. Who's ready to challenge their framework?\n#DigitalTransformation #AI #Consulting #Strategy #DataGovernance #Cybersecurity #Streamlit #Hiring",
        "xls_template": "üì¶ Download Excel Template",
        "xls_template_tip": "Sheet `questions` required: domain, question, weight, level_1..level_5",
        "default_strengths": "Strengths",
        "default_risks": "Risks/Priorities",
        "fallback_summary": "Summary ‚Äî Global score **{score:.1f}/100**. {strengths}: {s_list}. {risks}: {r_list}.",
        "fallback_roadmap_title": "Roadmap (heuristic, no AI)",
        "fallback_roadmap_90": "**90 Days (Quick Wins):**",
        "fallback_roadmap_6m": "**6 Months (Foundation):**",
        "fallback_roadmap_12m": "**12 Months (Scale):**",
        "quick_win_line": "- [{domain}] **Priority action** on ‚Äú{question}‚Äù (Current Score: {level}/5) ‚Äî Target Level 3."
    }
}

# Lang selection (query param or sidebar)
# Utilisation de st.query_params qui est la m√©thode recommand√©e maintenant
q_params = st.query_params
# Utiliser .get pour r√©cup√©rer la valeur, default √† ["fr"] si non pr√©sent
lang_list = q_params.get("lang", ["fr"])
# S'assurer qu'il y a bien une valeur dans la liste
q_lang = lang_list[0] if lang_list else "fr"
cur_lang = "en" if q_lang.lower().startswith("en") else "fr"

with st.sidebar:
    st.header(LANGS[cur_lang]["sidebar_title"])
    # Utiliser on_change pour mettre √† jour la langue imm√©diatement
    def update_lang():
        # Utiliser .set() qui est la m√©thode moderne pour les query params
        # G√©rer le cas o√π query_params n'est pas directement modifiable (anciennes versions Streamlit?)
        try:
             st.query_params["lang"] = st.session_state.lang_select
        except AttributeError: # AttributError si query_params n'est pas modifiable
             st.experimental_set_query_params(lang=st.session_state.lang_select)


    selected_lang = st.selectbox(
        LANGS[cur_lang]["sidebar_lang"],
        ["fr","en"],
        index=(0 if cur_lang=="fr" else 1),
        key="lang_select",
        on_change=update_lang
    )
    # Assurer la coh√©rence si selectbox change la langue via interaction
    if 'lang_select' in st.session_state:
        cur_lang = st.session_state.lang_select


T = LANGS[cur_lang]

# =========================
# CSS "MAGNIFIQUE" (Dark Mode SaaS)
# =========================
st.markdown("""
<style>
/* Base */
body {
    color: #F8FAFC; /* Texte clair */
}
/* Titres */
.title {
    font-size: 38px;
    font-weight: 800;
    margin-bottom: 4px;
    letter-spacing: -0.5px;
}
.sub {
    color: #CBD5E1; /* Gris clair */
    margin-bottom: 24px;
    font-size: 18px;
}
/* Cartes KPI - Look "Dashboard" */
.card {
    background-color: #1E293B; /* Slate 800 */
    border: 1px solid #334155; /* Slate 700 */
    border-radius: 12px;
    padding: 24px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    height: 100%; /* Pour aligner les cartes */
}
.kpi {
    font-size: 42px;
    font-weight: 800;
    line-height: 1.1;
    color: #F8FAFC;
}
.kpi-sub {
    color: #94A3B8; /* Slate 400 */
    font-size: 14px;
    font-weight: 500;
}
/* Gradient pour le titre */
.gradient {
    background: linear-gradient(90deg, #A78BFA, #A78BFA); /* Violet 400 */
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}
/* Am√©lioration des expanders */
.stExpander {
    background-color: #1E293B; /* Slate 800 */
    border: 1px solid #334155; /* Slate 700 */
    border-radius: 10px !important;
    margin-bottom: 12px; /* Espacement entre expanders */
}
.stExpander header {
    font-size: 16px;
    font-weight: 600;
    color: #F1F5F9; /* Slate 100 */
}
/* Style pour st.radio horizontal */
div[role="radiogroup"] {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;
    gap: 10px; /* Espace entre les boutons radio */
}
/* Style des boutons radio */
div[role="radiogroup"] label {
    background-color: #334155; /* Slate 700 */
    border: 1px solid #475569; /* Slate 600 */
    padding: 8px 16px;
    border-radius: 8px;
    transition: all 0.2s ease;
    cursor: pointer; /* Indiquer que c'est cliquable */
    display: flex; /* Aligner le texte */
    align-items: center;
    margin-bottom: 0 !important; /* Override Streamlit margin */
}
div[role="radiogroup"] label:hover {
    background-color: #475569; /* Slate 600 */
}

/* Style pour l'option radio S√âLECTIONN√âE - PLUS VISIBLE */
/* Cibler le label parent quand le radio input est check√© */
div[role="radiogroup"] label:has(input[type="radio"]:checked) {
     background-color: #6D28D9 !important; /* Violet plus fonc√© */
     border-color: #A78BFA !important; /* Bordure violet clair */
     color: #F8FAFC !important; /* Texte clair */
}

/* Style du texte √† l'int√©rieur du label s√©lectionn√© */
div[role="radiogroup"] label:has(input[type="radio"]:checked) span {
     color: #F8FAFC !important;
     font-weight: bold;
}


/* Cacher le point radio par d√©faut */
div[role="radiogroup"] input[type="radio"] {
    opacity: 0;
    position: absolute;
    width: 0;
    height: 0;
}

/* Enlever la marge par d√©faut du widget radio global */
div[data-testid="stRadio"] > label {
    margin-bottom: 0px !important;
}
/* Ajuster l'espacement global du widget radio si n√©cessaire */
div[data-testid="stRadio"] {
    padding-bottom: 10px; /* Ajouter un peu d'espace en dessous */
}

</style>
""", unsafe_allow_html=True)


st.markdown(f"<div class='title gradient'>{T['app_title']}</div>", unsafe_allow_html=True)
st.markdown(f"<div class='sub'>{T['app_sub']}</div>", unsafe_allow_html=True)

# =========================
# R√©f√©rentiel par d√©faut (VOTRE EXPERTISE)
# =========================
# Utilisation directe du DataFrame pour √©viter des copies inutiles si possible
VOTRE_REFERENTIEL = pd.DataFrame([
    # === AXE 1 : Strat√©gie, Gouvernance, Organisation ===
    ["AXE 1 - Strat√©gie", "Politique & Strat√©gie", 1.0,
     "Cadre strat√©gique et politique data √† d√©finir",
     "Cadre strat√©gique data d√©fini",
     "Politique de gouvernance & qualit√© d√©finie",
     "Politique de gouvernance & qualit√© formalis√©e, divulgu√©e et mise √† jour",
     "Politique data audit√©e et align√©e dynamiquement sur la strat√©gie groupe"],

    ["AXE 1 - Strat√©gie", "Gouvernance", 1.0,
     "Comit√©s autour de la donn√©e √† d√©finir",
     "Comit√© ad hoc non structur√©",
     "Comit√© mis en place au sein de chaque m√©tier & fonction",
     "Comit√©s transverses (M√©tier & IT) mis en place avec participation du top management",
     "Gouvernance data int√©gr√©e aux d√©cisions strat√©giques (ExCom)"],

    ["AXE 1 - Strat√©gie", "Organisation", 1.0,
     "R√¥les et responsabilit√©s √† d√©finir",
     "Data Owner & Data Steward identifi√©s",
     "Identification d'un CDO / DPO",
     "Mise en Place d'un Data Office structur√©",
     "Data Office reconnu comme centre d'excellence transverse"],

    # === AXE 2 : Connaissance Data ===
    ["AXE 2 - Connaissance", "Identification des donn√©es", 1.0,
     "Cat√©gorisation des donn√©es √† effectuer, Golden sources √† identifier",
     "Quelques donn√©es cl√©s identifi√©es pour le suivi de l'activit√©",
     "D√©marche d'identification des donn√©es prioritaires formalis√©e, cat√©gorisation en cours",
     "Cat√©gorisation √©tablie, Golden sources identifi√©es, d√©marche revue p√©riodiquement",
     "Inventaire des donn√©es 'data assets' 100% automatis√© et outill√©"],

    ["AXE 2 - Connaissance", "Catalogue & Lineage", 1.0,
     "Standards et r√©f√©rentiels data √† d√©finir",
     "Cadre standard de m√©tadonn√©e mis en place",
     "Catalogue & dictionnaire formalis√©s, Lineage fonctionnel en place",
     "Catalogue partag√©, gouvern√© et mis √† jour, Lineages fonctionnel & technique en place",
     "Catalogue pr√©dictif et 'data marketplace' active"],

    ["AXE 2 - Connaissance", "Donn√©es de r√©f√©rences (MDM)", 1.0,
     "R√©flexion en cours sur l'organisation de la gestion des donn√©es de r√©f√©rences",
     "Existence de mapping (souvent Excel)",
     "Identification de golden sources, d√©but d'automatisation",
     "Golden source et golden copy identifi√©es, gestion outill√©e, automatis√©e et gouvern√©e",
     "MDM global et 'multi-domaine' unifi√©"],

    # === AXE 3 : Qualit√© des donn√©es ===
    ["AXE 3 - Qualit√©", "Approche et d√©marches qualit√©", 1.0,
     "Approche et d√©marche qualit√© en cours de r√©flexion",
     "Crit√®res de qualit√© d√©finis, processus d'identification des anomalies d√©fini",
     "Processus de gestion des anomalies (stockage, plans d'action, suivi rem√©diation) mis en place",
     "Organisation sp√©cifique (Data Quality Manager, comit√©s qualit√©) mise en place",
     "Qualit√© 'by design' int√©gr√©e dans tous les nouveaux projets"],

    ["AXE 3 - Qualit√©", "Contr√¥le qualit√©", 1.0,
     "Plan de contr√¥le qualit√© en cours d'√©laboration",
     "Cadre de contr√¥le d√©fini, plan de contr√¥le pour donn√©es prioritaires",
     "Contr√¥les de 1er niveau (collecte, traitement, restitution) document√©s, semi-automatis√©s",
     "Contr√¥les qualit√© enti√®rement automatis√©s et outill√©s, plan de contr√¥le 2e niveau d√©fini",
     "Contr√¥les pr√©dictifs (IA) pour anticiper les non-qualit√©s"],

    ["AXE 3 - Qualit√©", "Metrics (Mesure Gouv & Qualit√©)", 1.0,
     "Indicateurs sp√©cifiques √† d√©finir",
     "Indicateurs de mesure de la qualit√© des donn√©es mis en place",
     "Indicateurs de suivi de la gouvernance de la qualit√© (reporting) d√©finis et mis en place",
     "Plan d'am√©lioration continue (revue des seuils, outils temps r√©el) d√©fini et mis en place",
     "Scoring de qualit√© expos√© en temps r√©el via API √† toute l'entreprise"],

    # === AXE 4 : Socle & Archi SI ===
    ["AXE 4 - Socle SI", "S√©curit√©", 1.0,
     "R√©flexion en cours sur la gestion de la s√©curit√© et des droits d'acc√®s",
     "Niveau de protection et droits d'acc√®s d√©fini √† minima pour les donn√©es prioritaires",
     "Politique de gestion des acc√®s (IAM) d√©finie, contraintes de localisation prises en compte",
     "Conformit√© align√©e gouvernance globale, audits r√©guliers, plan de contr√¥le 2e niveau",
     "S√©curit√© 'Zero Trust' et contr√¥les de conformit√© 100% automatis√©s"],

    ["AXE 4 - Socle SI", "Architecture", 1.0,
     "Mod√©lisation des donn√©es √† initier",
     "Flux des donn√©es cl√©s/r√©f√©rences cartographi√©s, localisation effectu√©e",
     "Mod√©lisation des donn√©es cl√©s/r√©f√©rences effectu√©e",
     "Gestion outill√©e et automatis√©e des donn√©es, cartographie globale effectu√©e",
     "Architecture 'data mesh' ou 'data fabric' active et scalable"],

    ["AXE 4 - Socle SI", "Outils & Solution", 1.0,
     "Identification des outils et solutions √† pr√©voir",
     "Connecteurs, APIs mis en place pour faciliter l'acc√®s aux donn√©es",
     "Ingestion temps r√©el possible, Data Lake mise en place",
     "Data Lab mis en place, contr√¥le automatis√© du monitoring des models",
     "Plateforme MLOps/DataOps unifi√©e et 100% 'self-service'"],

    # === AXE 5 : Culture Data ===
    ["AXE 5 - Culture", "Culture Data", 1.0,
     "Peu d'initiative pour la promotion de la donn√©e",
     "Organisation d'activit√©s ponctuelles d'initiation aux probl√©matiques data",
     "Plan de formation formalis√© et d√©ploy√©, identification de r√©f√©rents m√©tiers/IT",
     "Communaut√©s data (M√©tiers & IT) mises en place, ateliers r√©guliers",
     "Culture 'data-driven' g√©n√©ralis√©e, la donn√©e est l'affaire de tous"],

    # === AXE 6 : Initiative & Valorisation ===
    ["AXE 6 - Valorisation", "Business Model", 1.0,
     "R√©flexion √† initier sur l'impact de la data sur le business model",
     "Mise en place d'une veille concurrentielle par les donn√©es",
     "Plateformisation des services mise en place",
     "Data as an Asset: composante strat√©gique dans la construction du business model",
     "Nouveaux 'business models' 100% bas√©s sur la valorisation de la donn√©e (ex: Data as a Service)"],

    ["AXE 6 - Valorisation", "Usages des donn√©es", 1.0,
     "Identification de certains cas d'usage de valorisation data √† initier",
     "Centralisation des diff√©rentes sources des donn√©es",
     "Mod√®le pr√©dictif mis en place pour les m√©tiers cl√©s",
     "Data Driven: solutions et d√©cisions appuy√©es par les donn√©es",
     "Optimisation et simulation (jumeau num√©rique) bas√©es sur l'IA"],

    ["AXE 6 - Valorisation", "Initiatives", 1.0,
     "Plan d'action √† initier pour la promotion de la donn√©e",
     "D√©silotage des donn√©es √† travers les m√©tiers et fonctions",
     "Communaut√© data mis en place",
     "Data Insight: organisation centr√©e sur la donn√©e avec des assets partag√©s",
     "Innovation data 'bottom-up' encourag√©e et financ√©e (ex: hackathons)"]
], columns=["domain", "question", "weight", "level_1", "level_2", "level_3", "level_4", "level_5"])

DEFAULT_QUESTIONS = VOTRE_REFERENTIEL # Pas besoin de .copy() ici si on ne le modifie pas

LEVEL_MAP = { "level_1": 1, "level_2": 2, "level_3": 3, "level_4": 4, "level_5": 5 }

# =========================
# Sidebar (fichiers & IA)
# =========================
with st.sidebar:
    excel = st.file_uploader(T["sidebar_excel"], type=["xlsx"])
    use_ai = st.toggle(T["sidebar_ai_toggle"], value=False, help="N√©cessite une cl√© API OpenAI valide")
    model_name = st.text_input(T["sidebar_model"], value="gpt-4o-mini", help="Mod√®le √† utiliser pour l'analyse IA")
    api_key = st.text_input(T["sidebar_api"], type="password", value=os.getenv("OPENAI_API_KEY",""), help="Votre cl√© API OpenAI (gard√©e secr√®te)")
    st.caption(T["sidebar_hint"])

# Bouton pour t√©l√©charger un mod√®le Excel
@st.cache_data # Mise en cache pour √©viter recalcul inutile
def get_template_bytes() -> bytes:
    buf = io.BytesIO()
    # Utiliser VOTRE_REFERENTIEL directement
    with pd.ExcelWriter(buf, engine="openpyxl") as writer:
        VOTRE_REFERENTIEL.to_excel(writer, sheet_name="questions", index=False)
    buf.seek(0) # Revenir au d√©but du buffer
    return buf.getvalue()

with st.sidebar:
    st.markdown("---") # S√©parateur visuel
    st.markdown(T["xls_template_tip"])
    st.download_button(
        label=T["xls_template"],
        data=get_template_bytes(),
        file_name="maturity_questions_template.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" # Mime type correct pour xlsx
    )

# =========================
# Chargement du r√©f√©rentiel
# =========================
# @st.cache_data # Mise en cache potentielle si le fichier upload√© ne change pas souvent
def load_questions(uploaded_file):
    if uploaded_file is None:
        return DEFAULT_QUESTIONS
    try:
        # Lire directement depuis l'objet upload√©
        df = pd.read_excel(uploaded_file, sheet_name="questions")
        # V√©rification plus robuste des colonnes requises
        required_cols = {"domain", "question", "weight"}
        level_cols = set(T["level_keys"])
        if not required_cols.issubset(df.columns):
            st.error(f"Fichier Excel invalide. Colonnes requises manquantes: {required_cols - set(df.columns)}")
            return DEFAULT_QUESTIONS.copy() # Retourner une copie pour √©viter modif accidentelle
        # Ajouter les colonnes de niveau manquantes avec des cha√Ænes vides
        for col in level_cols:
            if col not in df.columns:
                df[col] = ""
        # Nettoyer les types si n√©cessaire (optionnel mais recommand√©)
        # Assurer que weight est num√©rique, fallback √† 1.0 si erreur/manquant
        df['weight'] = pd.to_numeric(df['weight'], errors='coerce').fillna(1.0)
        df['domain'] = df['domain'].astype(str).fillna("Domaine Manquant").str.strip() # Remplacer NaN et strip
        df['question'] = df['question'].astype(str).fillna("Question Manquante").str.strip() # Remplacer NaN et strip
        # Supprimer les lignes o√π domain ou question sont r√©ellement vides apr√®s nettoyage
        df = df[df['domain'] != ""]
        df = df[df['question'] != ""]
        df = df[df['domain'] != "Domaine Manquant"]
        df = df[df['question'] != "Question Manquante"]
        # Assurer que les poids sont valides (non-NaN apr√®s conversion)
        df['weight_numeric'] = pd.to_numeric(df['weight'], errors='coerce')
        df = df[df['weight_numeric'].notna()]
        df = df.drop(columns=['weight_numeric']) # Supprimer colonne temporaire

        if df.empty:
            st.warning("Le fichier Excel ne contient aucune question valide apr√®s nettoyage.")
            return DEFAULT_QUESTIONS.copy()

        return df
    except Exception as e:
        st.error(f"Erreur lors de la lecture du fichier Excel: {e}")
        return DEFAULT_QUESTIONS.copy() # Retourner une copie

# Chargement conditionnel bas√© sur l'upload
Q = load_questions(excel)

# =========================
# Questionnaire (UX AM√âLIOR√âE AVEC st.radio)
# =========================
st.markdown(f"### {T['questionnaire']}")
# Utiliser les domaines du DataFrame charg√© (Q), pas DEFAULT_QUESTIONS
# Filtrer les domaines vides ou NaN potentiels
valid_domains = [d for d in Q["domain"].unique() if pd.notna(d) and str(d).strip()]
domains = sorted(valid_domains)
answers = {} # Utiliser un dictionnaire pour stocker les r√©ponses par cl√© unique

# Initialiser les r√©ponses dans session_state si elles n'existent pas
for d in domains:
    block = Q[Q["domain"]==d]
    for i, row in block.iterrows():
         # Utiliser l'index pandas original comme partie de la cl√©
        row_idx = i # Utiliser directement l'index pandas
        state_key = f"choice_{d}_{row_idx}"
        if state_key not in st.session_state:
            st.session_state[state_key] = T["level_options"][0] # Default to "1"


# Afficher le questionnaire
if not domains:
     st.warning("Aucun domaine valide trouv√© dans le r√©f√©rentiel charg√©.")
else:
    for d in domains:
        st.markdown(f"#### **{d}**")
        block = Q[Q["domain"]==d] # Pas besoin de reset_index si on utilise l'index original

        for i, row in block.iterrows():
            # V√©rification si la question est valide
            question_text = row.get("question")
            if pd.isna(question_text) or not str(question_text).strip():
                continue # Ignorer silencieusement

            row_idx = i
            state_key = f"choice_{d}_{row_idx}"

            with st.expander(f"{question_text}"):
                # R√©cup√©rer la valeur actuelle de session_state pour le radio
                current_value = st.session_state.get(state_key, T["level_options"][0])
                if current_value not in T["level_options"]:
                    current_value = T["level_options"][0] # Reset si invalide
                    st.session_state[state_key] = current_value
                # Trouver l'index correspondant √† la valeur actuelle
                try:
                    current_value_index = T["level_options"].index(current_value)
                except ValueError:
                    current_value_index = 0 # Fallback au premier √©l√©ment si non trouv√©
                    st.session_state[state_key] = T["level_options"][0]


                chosen_label = st.radio(
                    label=f"Niveau pour: {question_text}", # Label unique pour accessibilit√©
                    options=T["level_options"],
                    key=state_key, # Utilisation de la cl√© unique
                    index=current_value_index, # Assurer que l'index correspond √† la valeur
                    horizontal=True,
                    label_visibility="collapsed"
                )

                # Mapping et affichage description
                chosen_key = f"level_{chosen_label}"
                level_num = int(chosen_label)
                desc = row.get(chosen_key, "Description non disponible") # Fallback pour description manquante

                st.caption(f"{T['chosen_level']}: **{chosen_label}/5** ‚Äî {desc}")

                # Stocker la r√©ponse dans le dictionnaire 'answers'
                weight_val = 1.0 # Default weight
                try:
                    weight_input = pd.to_numeric(row["weight"], errors='coerce')
                    if pd.notna(weight_input) and np.isfinite(weight_input):
                        weight_val = float(weight_input)
                except Exception:
                     weight_val = 1.0

                answers[state_key] = {
                    "domain": d,
                    "question": question_text,
                    "weight": weight_val,
                    "level": level_num
                }

# V√©rifier s'il y a des r√©ponses avant de continuer
if not answers:
    # Afficher le message seulement si des domaines existent
    if domains:
        st.info("Veuillez r√©pondre √† au moins une question pour g√©n√©rer le rapport.")
    # Si aucun domaine n'existe (fichier vide/invalide), l'avertissement pr√©c√©dent suffit
    st.stop()

# Cr√©er le DataFrame de r√©ponses √† partir du dictionnaire
A = pd.DataFrame(list(answers.values()))

# =========================
# Scoring
# =========================
def score_domain(df_group):
    df_group = df_group.copy()
    df_group['level'] = pd.to_numeric(df_group['level'], errors='coerce')
    df_group['weight'] = pd.to_numeric(df_group['weight'], errors='coerce').fillna(1.0).clip(lower=0)
    df_group = df_group.dropna(subset=['level'])

    if df_group.empty:
        return np.nan

    x = df_group.assign(norm=(df_group["level"] - 1) / 4.0)
    w = x["weight"]
    w_sum = w.sum()

    if w_sum <= 0:
        if not x["norm"].empty:
             return float(100 * x["norm"].mean())
        else:
             return np.nan

    try:
        weighted_score = np.average(x["norm"], weights=w)
        return float(100 * weighted_score)
    except ZeroDivisionError:
         return 0.0


# Calcul des scores
domain_scores = {}
global_score = np.nan
calculated_scores = []

try:
    if not A.empty:
        # Appliquer score_domain seulement si A n'est pas vide
        grouped = A.groupby("domain")
        for name, group in grouped:
            if not group.empty:
                score = score_domain(group)
                domain_scores[name] = score
                if pd.notna(score):
                    calculated_scores.append(score)

        if calculated_scores:
            global_score = float(np.mean(calculated_scores))
        else:
            if not A.empty:
                 st.warning("Aucun score de domaine calculable. V√©rifiez les poids/niveaux.")

except Exception as e:
    st.error(f"Erreur majeure lors du calcul des scores: {e}.")
    import traceback
    st.error(traceback.format_exc())
    domain_scores = {d: np.nan for d in domains}
    global_score = np.nan


st.divider()
# Affichage des KPIs
kpi_global_display = f"{global_score:.1f}" if pd.notna(global_score) else "N/A"
kpi_domains_count = len(domains) # Nombre total de domaines du r√©f√©rentiel
kpi_questions_count = len(A) # Nombre de r√©ponses valides
weak_domains = [d for d, s in domain_scores.items() if pd.notna(s) and s < 60]
kpi_weak_count = len(weak_domains)

c1, c2, c3, c4 = st.columns(4)
with c1: st.markdown(f"<div class='card'><div class='kpi'>{kpi_global_display}</div><div class='kpi-sub'>{T['kpi_global']}</div></div>", unsafe_allow_html=True)
with c2: st.markdown(f"<div class='card'><div class='kpi'>{kpi_domains_count}</div><div class='kpi-sub'>{T['kpi_domains']}</div></div>", unsafe_allow_html=True)
with c3: st.markdown(f"<div class='card'><div class='kpi'>{kpi_questions_count}</div><div class='kpi-sub'>{T['kpi_questions']}</div></div>", unsafe_allow_html=True)
with c4: st.markdown(f"<div class='card'><div class='kpi'>{kpi_weak_count}</div><div class='kpi-sub'>{T['kpi_weak']}</div></div>", unsafe_allow_html=True)

# =========================
# Viz ‚Äî Radar & Priorisation (Adapt√© au Dark Mode)
# =========================
st.markdown(f"### {T['radar_title']}")
fig_radar = go.Figure()

# Domaines valides pour le radar (scores non-NaN, ordre alphab√©tique de `domains`)
valid_radar_data = {d: domain_scores.get(d) for d in domains if pd.notna(domain_scores.get(d))}

if valid_radar_data:
    radar_domains = list(valid_radar_data.keys())
    r_vals = list(valid_radar_data.values())

    if r_vals:
        theta_vals = radar_domains
        # Boucler seulement si > 1 point
        if len(r_vals) > 1:
            r_vals.append(r_vals[0])
            theta_vals.append(theta_vals[0])
        elif len(r_vals) == 1: # Si 1 seul point, dupliquer pour ligne visible
             r_vals = [0, r_vals[0]]
             theta_vals = [theta_vals[0], theta_vals[0]]


        fig_radar.add_trace(go.Scatterpolar(
            r=r_vals,
            theta=theta_vals,
            fill='toself' if len(theta_vals) > 2 else 'none', # Remplir si polygone (>2 pts)
            fillcolor='rgba(167, 139, 250, 0.3)',
            line=dict(color='#A78BFA', width=3)
        ))
    else:
         st.warning("Aucun score num√©rique valide trouv√© pour construire le radar.")

    fig_radar.update_layout(
        polar=dict(
            radialaxis=dict(visible=True, range=[0, 100], color="#94A3B8", gridcolor="#334155"),
            angularaxis=dict(color="#F8FAFC", gridcolor="#334155", tickfont=dict(size=12))
        ),
        showlegend=False,
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        margin=dict(l=40, r=40, t=40, b=40)
    )
    if r_vals: # Afficher seulement si trace ajout√©e
        st.plotly_chart(fig_radar, use_container_width=True)
else:
    st.warning("Aucun score de domaine valide √† afficher dans le radar.")


# --- Priorisation ---
# Nettoyer Q avant groupby
Q['weight'] = pd.to_numeric(Q['weight'], errors='coerce').fillna(1.0).clip(lower=0)
weights_by_domain = Q.groupby("domain")["weight"].sum().to_dict()

prio_list = []
# It√©rer sur les domaines avec score valide
for d in valid_radar_data.keys(): # Utiliser cl√©s de valid_radar_data
    score = valid_radar_data[d]
    weight = float(weights_by_domain.get(d, 1.0))
    if pd.isna(weight) or weight <= 0: weight = 1.0

    prio_list.append({
        "domain": d,
        "score": score,
        "weight_total": weight,
        "priority_index": float((100 - score) * weight)
    })

if prio_list:
    prio_df = pd.DataFrame(prio_list).sort_values("priority_index", ascending=False).reset_index(drop=True)
else:
    prio_df = pd.DataFrame(columns=["domain", "score", "weight_total", "priority_index"])

st.markdown(f"### {T['prio_title']}")
st.dataframe(prio_df.style.format({"score": "{:.1f}", "weight_total": "{:.2f}", "priority_index": "{:.1f}"}), use_container_width=True)

# --- Bar Chart de Priorisation ---
if not prio_df.empty:
    try:
        # S'assurer que les donn√©es sont valides
        df_chart = prio_df.dropna(subset=['domain', 'priority_index', 'score'])
        if not df_chart.empty:
            fig_bar = px.bar(
                df_chart,
                x="domain",
                y="priority_index",
                color="score",
                title=T["bar_title"],
                text=df_chart["score"].round(1),
                color_continuous_scale=px.colors.sequential.Viridis_r,
                labels={"priority_index": "Indice de Priorit√©", "domain": "Domaine", "score": "Score"}
            )
            fig_bar.update_traces(textposition="outside")
            fig_bar.update_layout(
                paper_bgcolor='rgba(0,0,0,0)',
                plot_bgcolor='rgba(0,0,0,0)',
                font_color="#F8FAFC",
                yaxis=dict(gridcolor="#334155", title="Indice de Priorit√©"),
                xaxis=dict(gridcolor="#334155", title="Domaine"),
                coloraxis_colorbar=dict(title="Score")
            )
            fig_bar.update_xaxes(categoryorder='array', categoryarray=df_chart['domain'])
            st.plotly_chart(fig_bar, use_container_width=True)
        else:
            st.warning("Donn√©es invalides pour graphique priorisation apr√®s nettoyage.")

    except Exception as e:
        st.error(f"Erreur cr√©ation graphique barres: {e}")

else:
     st.warning("Impossible de g√©n√©rer le graphique de priorisation (pas de donn√©es valides).")


# =========================
# Heuristique d‚Äôactions (sans IA) - Robuste
# =========================
@st.cache_data # Mise en cache possible
def generate_heuristic_actions(_df_q: pd.DataFrame, _df_a: pd.DataFrame, _df_prio: pd.DataFrame, lang_code: str) -> str:
    if _df_a.empty or _df_q.empty or _df_prio.empty:
        return "- Aucun quick win identifiable (donn√©es manquantes) -"
    out = []
    try:
        required_q_cols = {"domain", "question", "weight"}
        required_a_cols = {"domain", "question", "level"}
        if not required_q_cols.issubset(_df_q.columns) or not required_a_cols.issubset(_df_a.columns):
            missing_q = required_q_cols - set(_df_q.columns); missing_a = required_a_cols - set(_df_a.columns)
            return f"- Colonnes manquantes (Q: {missing_q}, A: {missing_a}) -"

        df_q_clean = _df_q.copy(); df_q_clean['weight'] = pd.to_numeric(df_q_clean['weight'], errors='coerce').fillna(1.0).clip(lower=0)
        q_subset = df_q_clean[["domain", "question", "weight"]].drop_duplicates(subset=["domain", "question"])
        df_a_clean = _df_a.copy(); df_a_clean['level'] = pd.to_numeric(df_a_clean['level'], errors='coerce')
        df_a_clean = df_a_clean.dropna(subset=['level']); df_a_clean['level'] = df_a_clean['level'].astype(int)

        merged = df_a_clean.merge(q_subset, on=["domain", "question"], how="left"); merged['weight'] = merged['weight'].fillna(1.0)
        prio_domains_order = _df_prio["domain"].tolist(); domain_order_map = {domain: i for i, domain in enumerate(prio_domains_order)}
        merged = merged[merged['domain'].isin(domain_order_map)]
        if merged.empty: return "- Aucun domaine prioritaire trouv√© dans les r√©ponses -"
        merged['prio_sort_order'] = merged['domain'].map(domain_order_map)

        low_level_actions = merged[merged["level"] <= 2]
        if low_level_actions.empty: return "- Aucun point critique (niveau 1 ou 2) identifi√© -"

        wins = low_level_actions.sort_values(by=['prio_sort_order', 'level', 'weight'], ascending=[True, True, False]).head(5)
        line_template = LANGS[lang_code]["quick_win_line"]
        for _, r in wins.iterrows():
            try:
                out.append(line_template.format(domain=r.get("domain", "N/A"), question=r.get("question", "N/A"), level=int(r.get("level", 0))))
            except Exception as fmt_e: st.warning(f"Erreur formatage quick win: {fmt_e} - Ligne: {r.to_dict()}")
        return "\n".join(out) if out else "- Aucun quick win applicable trouv√© -"
    except Exception as e:
        st.error(f"Erreur technique (generate_heuristic_actions): {e}"); import traceback; st.error(traceback.format_exc())
        return "- Erreur technique identification quick wins -"

# Appel
quick_wins = generate_heuristic_actions(Q, A, prio_df, cur_lang)


# =========================
# IA (optionnelle) - Gestion Erreurs Am√©lior√©e
# =========================
# @st.cache_data # Cache d√©licat
def ai_summary_openai(api_key_param: str, model_param: str, prompt_param: str) -> str:
    if not api_key_param: return "(CL√â API MANQUANTE)"
    try:
        from openai import OpenAI, AuthenticationError, RateLimitError, NotFoundError, APIError, BadRequestError
        client = OpenAI(api_key=api_key_param)
        resp = client.chat.completions.create(model=model_param, messages=[{"role": "system", "content": "You are a world-class strategic consultant... Use Markdown heavily."}, {"role": "user", "content": prompt_param}], temperature=0.6, max_tokens=1500)
        choice = resp.choices[0]
        if choice.message and choice.message.content: return choice.message.content.strip()
        else: st.warning("Agent IA: R√©ponse vide."); return "(R√âPONSE IA VIDE)"
    except ImportError: st.error("pip install openai"); return "(ERREUR TECHNIQUE: OpenAI non install√©)"
    except AuthenticationError: st.error("Erreur Auth OpenAI: V√©rifiez cl√© API."); return "(ERREUR AUTHENTIFICATION)"
    except RateLimitError: st.warning("Erreur OpenAI: Quota atteint."); return "(ERREUR QUOTA)"
    except NotFoundError: st.error(f"Erreur OpenAI: Mod√®le '{model_param}' introuvable."); return f"(ERREUR MOD√àLE '{model_param}' INTROUVABLE)"
    except BadRequestError as e: st.error(f"Erreur OpenAI (Bad Request): {e}"); return "(ERREUR REQU√äTE IA)"
    except APIError as e: st.error(f"Erreur API OpenAI: {e}"); return f"(ERREUR API OPENAI: {e})"
    except Exception as e: st.error(f"Erreur inattendue (Agent IA): {e}"); import traceback; st.error(traceback.format_exc()); return f"(ERREUR INATTENDUE AGENT IA)"

# Affichage conditionnel
if not use_ai: st.info(T["ai_mode_manual"])
elif not api_key and use_ai: st.warning("Agent IA activ√©, mais cl√© API manquante.")

# --- Pr√©paration Contexte ---
valid_scores_dict = {k: f"{v:.1f}" for k, v in domain_scores.items() if pd.notna(v)}
domain_scores_str = str(valid_scores_dict) if valid_scores_dict else "N/A"
prio_order_str = ', '.join(prio_df['domain'].tolist()) if not prio_df.empty else "N/A"
global_score_str = f"{global_score:.1f}/100" if pd.notna(global_score) else "N/A"
quick_wins_context = quick_wins if not quick_wins.startswith("-") else "Aucun quick win critique identifi√©."

base_context = f"""
INFORMATIONS CL√âS DU DIAGNOSTIC:
- Score Global Actuel: {global_score_str}
- Scores par Domaine: {domain_scores_str}
- Domaines Prioritaires (ordre d√©croissant d'urgence): {prio_order_str}
- Actions Quick Wins sugg√©r√©es (bas√©es sur score <= 2):
{quick_wins_context}"""

summary_text_ai = None
roadmap_text_ai = None

# --- Appel IA ---
if use_ai and api_key:
    # D√©finition dynamique des prompts
    sum_prompt_template = LANGS[cur_lang].get("prompt_sum_template", """R√©dige une **Synth√®se Ex√©cutive** (Markdown): 3 Forces Cl√©s, 3 Risques Majeurs. Langue={lang}. {base_context}""") # Fallback simple
    map_prompt_template = LANGS[cur_lang].get("prompt_map_template", """R√©dige une **Feuille de Route** (Markdown): Plan 90j (3 actions), 6m (3 actions), 12m (2 actions). Actions SMART. Langue={lang}. {base_context}""") # Fallback simple

    # V√©rifier si les templates existent r√©ellement dans LANGS (pour √©viter KeyError)
    if "prompt_sum_template" not in LANGS[cur_lang]:
         # Utiliser le prompt g√©n√©rique si le template sp√©cifique manque
         if cur_lang == "fr":
             sum_prompt_template = """R√©dige une **Synth√®se Ex√©cutive** percutante (format Markdown) pour un Comit√© de Direction:\n- Rappelle bri√®vement le score global.\n- Liste **3 Forces Cl√©s** (domaines avec les meilleurs scores, si disponibles).\n- Liste **3 Risques Majeurs / Points Faibles** (domaines prioritaires avec les scores les plus bas, si disponibles).\nUtilise des listes √† puces. Sois direct et orient√© d√©cision. Ne mentionne pas "selon le contexte fourni".\n{base_context}"""
         else:
             sum_prompt_template = """Write a concise **Executive Summary** (Markdown format) for a Board meeting:\n- Briefly mention the overall score.\n- List **3 Key Strengths** (domains with the highest scores, if available).\n- List **3 Major Risks / Weaknesses** (priority domains with the lowest scores, if available).\nUse bullet points. Be direct and decision-oriented. Do not mention "based on the provided context".\n{base_context}"""

    if "prompt_map_template" not in LANGS[cur_lang]:
         if cur_lang == "fr":
            map_prompt_template = """R√©dige une **Feuille de Route Strat√©gique** d√©taill√©e (format Markdown) pour adresser ce diagnostic:\n### Plan d'Action - 90 Jours (Quick Wins)\n* Action 1: [Objectif SMART] - [Livrable concret] - [Impact: Faible/Moyen/√âlev√©]\n* Action 2: ... (total 3 actions ciblant les domaines **les plus prioritaires** list√©s)\n* Action 3: ...\n### Plan d'Action - 6 Mois (Structuration)\n* Action 1: [Objectif SMART] - [Livrable concret] - [Impact: Faible/Moyen/√âlev√©]\n* Action 2: ... (total 3 actions pour b√¢tir les fondations)\n* Action 3: ...\n### Plan d'Action - 12 Mois (Transformation & Scale)\n* Action 1: [Objectif SMART] - [Livrable concret] - [Impact: Faible/Moyen/√âlev√©]\n* Action 2: ... (total 2 actions visant l'excellence)\n**Instructions:** Inspire-toi des Quick Wins mais propose des actions SMART compl√®tes. Rends chaque plan actionnable.\n{base_context}"""
         else:
            map_prompt_template = """Write a detailed **Strategic Roadmap** (Markdown format):\n### 90-Day Action Plan (Quick Wins)\n* Action 1: [SMART Objective] - [Concrete Deliverable] - [Impact: Low/Med/High]\n* Action 2: ... (total 3 actions targeting top priority domains)\n* Action 3: ...\n### 6-Month Action Plan (Foundation)\n* Action 1: [SMART Objective] - [Concrete Deliverable] - [Impact: Low/Med/High]\n* Action 2: ... (total 3 actions for foundations)\n* Action 3: ...\n### 12-Month Action Plan (Transformation & Scale)\n* Action 1: [SMART Objective] - [Concrete Deliverable] - [Impact: Low/Med/High]\n* Action 2: ... (total 2 actions for excellence)\n**Instructions:** Use Quick Wins for inspiration but propose full SMART actions. Make it actionable.\n{base_context}"""


    sum_prompt = sum_prompt_template.format(base_context=base_context, lang=cur_lang)
    map_prompt = map_prompt_template.format(base_context=base_context, lang=cur_lang)

    # Ex√©cution appels IA
    with st.spinner(f"üöÄ Agent IA ({model_name}) analyse..."):
        summary_text_ai = ai_summary_openai(api_key, model_name, sum_prompt)

    if summary_text_ai and not summary_text_ai.startswith("("):
        with st.spinner(f"üß≠ Agent IA ({model_name}) √©labore la roadmap..."):
            roadmap_text_ai = ai_summary_openai(api_key, model_name, map_prompt)
        if roadmap_text_ai and roadmap_text_ai.startswith("("):
             st.warning(f"G√©n√©ration IA √©chou√©e (roadmap): {roadmap_text_ai}")
    elif summary_text_ai: # Erreur synth√®se
         st.warning(f"G√©n√©ration IA √©chou√©e (synth√®se): {summary_text_ai}. Roadmap non g√©n√©r√©e.")


# =========================
# Rapport Markdown + DL
# =========================
st.markdown(f"### {T['summary_title']}")

# --- S√©lection texte final ---
fallback_score_str = f"{global_score:.1f}" if pd.notna(global_score) else "N/A"
valid_scores_dict_report = {d: s for d, s in domain_scores.items() if pd.notna(s)}
strengths_list = ", ".join([d for d, s in valid_scores_dict_report.items() if s >= 70]) or "N/A"
risks_list = ", ".join([d for d, s in valid_scores_dict_report.items() if s < 60]) or "N/A"

# Utiliser texte IA si valide, sinon fallback
final_summary = summary_text_ai if summary_text_ai and not summary_text_ai.startswith("(") else T["fallback_summary"].format(
    score=fallback_score_str, strengths=T["default_strengths"], risks=T["default_risks"], s_list=strengths_list, r_list=risks_list
)
final_roadmap = roadmap_text_ai if roadmap_text_ai and not roadmap_text_ai.startswith("(") else f"""**{T['fallback_roadmap_title']}**

{T['fallback_roadmap_90']}
{quick_wins}

{T['fallback_roadmap_6m']}
- Standardiser processus (2 domaines faibles).
- KPIs mensuels.
- Outillage (catalogue, qualit√©) sur p√©rim√®tre prioritaire.

{T['fallback_roadmap_12m']}
- Automatiser gouvernance.
- Audits / certifications.
"""

# --- Formatage Rapport ---
scores_str_md = pd.Series(valid_scores_dict_report).round(1).to_string() if valid_scores_dict_report else 'N/A'
prio_str_md = prio_df[['domain','priority_index','score']].round(1).to_string(index=False) if not prio_df.empty else 'N/A'

report_md = f"""# üöÄ Rapport de Transformation Strat√©gique

**Score Global de Maturit√©:** {fallback_score_str}/100

---

## üìä Scores par Domaine

```
{scores_str_md}
```

## üß≠ Analyse de Priorisation (Indice = (100-Score) * Poids Total)

```
{prio_str_md}

